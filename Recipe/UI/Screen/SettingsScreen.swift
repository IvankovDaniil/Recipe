//
//  SettingsScreen.swift
//  Recipe
//
//  Created by –î–∞–Ω–∏–∏–ª –ò–≤–∞–Ω—å–∫–æ–≤ on 21.01.2025.
//

import SwiftUI
import SwiftData

struct SettingsScreen: View {
    @Environment(UserViewModel.self) private var userViewModel
    
    
    var body: some View {
        HStack(spacing: 0) {
            if let user = userViewModel.user {
                UserAuthorized(user: user) {
                    userViewModel.logout()
                }
            } else {
                NonRegisterView()
            }
        }
    }
}

private struct NonRegisterView: View {
    @State private var isRegPresented: Bool = false
    @State private var isLoginPresented: Bool = false
    
    var body: some View {
        VStack(spacing: 0) {
            Text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
            Text("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã —É –≤–∞—Å –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ—á–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –ø–æ—á—Ç—É, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
                .padding([.top, .bottom], 15)
                .multilineTextAlignment(.center)
            
            HStack {
                Button {
                    isRegPresented = true
                } label: {
                    Text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
                        .padding(15)
                        .blueRoundedBorder()
                }
                .sheet(isPresented: $isRegPresented, content: {
                    RegisterView(action: { isRegPresented = false })
                })
                
                Button {
                    isLoginPresented = true
                } label: {
                    Text("–í–æ–π—Ç–∏")
                        .padding(15)
                        .blueRoundedBorder()
                }
                .sheet(isPresented: $isLoginPresented, content: {
                    LoginView(action: { isLoginPresented = false })
                })
            }
        }
        .padding()
    }
}


#Preview {
    SettingsScreen()
        .modelContainer(for: UserModel.self, inMemory: true) // üëà –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Preview
        .environment(UserViewModel(modelContext: ModelContext.preview))
}

